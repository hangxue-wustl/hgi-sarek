process {
    cache = 'lenient'
    shell = ['/bin/bash', '-euo', 'pipefail']

    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
    maxRetries    = 3

    withName: 'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    withName: 'GATK4_GENOMICSDBIMPORT' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        clusterOptions  = { "-R \"rusage[tmp=20G]\"" }
        ext.args        = "--batch-size 50 --reader-threads 1 -ip 500"
    }

    withName: 'GATK4_GENOTYPEGVCFS' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        clusterOptions  = { "-R \"rusage[tmp=20G]\"" }
        ext.args        = { "-G StandardAnnotation -G AS_StandardAnnotation" }
    }

    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS'{
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    withName:'GATK4_MERGEVCFS'{
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
    }

    withName: 'GATK4_HAPLOTYPECALLER' {
    	cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    withName: 'MERGE_HAPLOTYPECALLER' {
		memory          = { check_max( 2.GB * task.attempt, 'memory' ) }
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        memory          = { check_max( 256.MB * task.attempt, 'memory' ) }
    }

    withName: 'BCFTOOLS_STATS' {
        memory          = { check_max( 128.MB * task.attempt, 'memory' ) }
    }

    withName: 'VCFTOOLS_TSTV_COUNT|VCFTOOLS_TSTV_QUAL|VCFTOOLS_SUMMARY' {
        memory          = { check_max( 128.MB * task.attempt, 'memory' ) }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        memory          = { check_max( 128.MB * task.attempt, 'memory' ) }
    }

    withName: 'MULTIQC' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 2.GB * task.attempt, 'memory' ) }
    }
}

singularity {
	autoMounts   = true
    enabled      = true
    cacheDir     = '/nfs/hgi/singularityContainers/'
}

executor {
    queueSize    = 4000
}
